/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import org.checkerframework.checker.units.qual.A;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class App {
    static final String HTTP_GET = "GET";
    public static void main(String[] args) {
        String resourcesPath = getResourcesPath();
        String recentQuotesFileName = "recentquotes.json";
        File recentQuotesJSONFile = new File(resourcesPath + recentQuotesFileName);
        Quote[] quotesArray = getQuotesArray(recentQuotesJSONFile);

        if(args.length == 2) {
            String searchType;
            String searchText;
            searchType = args[0];
            searchText = args[1];
            String results = getResultsViaQuery(quotesArray, searchType, searchText);
            System.out.println(results);
        } else {
            int randomIndex = getRandomAvailibleIndex(quotesArray.length);
            System.out.println(getQuote(quotesArray, randomIndex));
        }

///  Need to incorporate this block >>>>>>>

        File recentQuotesJSONFile = new File("./app/src/main/resources/recentquotes.json");
//        Random rand = new Random();
//        Quote[] quotesArray = getQuotesArray(recentQuotesJSONFile);
//        int randomNumber = rand.nextInt(0, quotesArray.length); // upper bound is exclusive
//        System.out.println(getQuote(quotesArray, randomNumber));
        URL apiUrl = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");
//        URL apiUrl = new URL("");
        URLConnection apiConnection = apiUrl.openConnection();
        HttpURLConnection apiHTTPConnection = (HttpURLConnection)apiConnection;
        apiHTTPConnection.setRequestMethod(HTTP_GET);
        InputStreamReader streamReader = attemptInputStream(apiHTTPConnection);

        BufferedReader apiBufferedReader = new BufferedReader(streamReader);
        String apiLine = apiBufferedReader.readLine();
        Gson gson = null;
        String deserializedApiQuote = "";
        try {
            gson = new GsonBuilder().setPrettyPrinting().create();
            APIQuote apiQuote = gson.fromJson(apiLine, APIQuote.class);
            Quote standardizedQuote = apiQuote.standardizeQuote();
            Quote[] quotesArray = getQuotesArray(recentQuotesJSONFile);
            Quote[] appendedQuotesArray = getAppendedArr(standardizedQuote, quotesArray);
            String deserializedAppendedQuotesArray = gson.toJson(appendedQuotesArray);
            try(FileWriter fileWriter = new FileWriter(recentQuotesJSONFile)) {
                fileWriter.write(deserializedAppendedQuotesArray);
            }
        } catch(JsonSyntaxException JSE) {
            Random rand = new Random();
            Quote[] quotesArray = getQuotesArray(recentQuotesJSONFile);
            int randomNumber = rand.nextInt(0, quotesArray.length); // upper bound is exclusive
            System.out.println(getQuote(quotesArray, randomNumber));
        }

/// <<<<< TO HERE
    }




    public static InputStreamReader attemptInputStream(HttpURLConnection connection) throws IOException {
        int status = connection.getResponseCode();
        System.out.println(status);
        if (status > 299) {
            return new InputStreamReader(connection.getErrorStream());
        } else {
            return new InputStreamReader(connection.getInputStream());
        }
    }

    public static Quote[] getAppendedArr(Quote quote, Quote[] quoteArr) {
        Quote[] appendedArr = new Quote[quoteArr.length + 1];
        for (int i = 0; i < quoteArr.length; i++) {
            appendedArr[i] = quoteArr[i];
        }
        appendedArr[quoteArr.length] = quote;
        return appendedArr;
    }

    public static String getResultsViaQuery(Quote[] quotesArray ,String searchType, String searchText) {
        if(searchType.equals("author"))
            return getQuoteByAuthor(quotesArray, searchText);
        else if (searchType.equals("contains"))
            return getQuoteByQuoteText(quotesArray, searchText);
        else
            return "Nothing found.";
    }

    public static String getQuoteByAuthor(Quote[] quotesArray, String searchText) {
        ArrayList<Quote> matchingQuotesList = new ArrayList<>();
        for(Quote quote : quotesArray) {
            if(quote.author.equals(searchText))
                matchingQuotesList.add(quote);
        }
        if(matchingQuotesList.size() > 0) {
            Quote[] matchingQuotesArray = new Quote[matchingQuotesList.size()];
            for(int i = 0; i < matchingQuotesList.size(); i++)
                matchingQuotesArray[i] = matchingQuotesList.get(i);
            int randomIndex = getRandomAvailibleIndex(matchingQuotesArray.length);
            return getQuote(matchingQuotesArray, randomIndex);
        } else
            return "Nothing found.";
    }

    public static String getQuoteByQuoteText(Quote[] quotesArray, String searchText) {
        ArrayList<Quote> matchingQuotesList = new ArrayList<>();
        for(Quote quote : quotesArray) {
            if(quote.text.contains(searchText))
                matchingQuotesList.add(quote);
        }
        if (matchingQuotesList.size() > 0) {
            Quote[] matchingQuotesArray = new Quote[matchingQuotesList.size()];
            for(int i = 0; i < matchingQuotesList.size(); i++)
                matchingQuotesArray[i] = matchingQuotesList.get(i);
            int randomIndex = getRandomAvailibleIndex(matchingQuotesArray.length);
            return getQuote(matchingQuotesArray, randomIndex);
        } else
        return "Nothing found.";
    }

    public static String getResourcesPath() {
        String userPath = System.getProperty("user.dir");
        if(userPath.endsWith("app"))
            return userPath + "/src/main/resources/";
        else
            return userPath + "/app/src/main/resources/";

    }

    public static int getRandomAvailibleIndex(int arrayLength) {
        Random rand = new Random();
        return rand.nextInt(0, arrayLength); // upper bound is exclusive
    }

    public static Quote[] getQuotesArray(File quotesJSONFile) {
        Quote[] output = null;
        FileReader reader;
        Gson gson = new Gson();
        try {
            reader = new FileReader(quotesJSONFile);
            output = gson.fromJson(reader, Quote[].class);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return output;
    }

    public static String getQuote(Quote[] quotesArray, int index) {
        return quotesArray[index].text + "\n-- " + quotesArray[index].author;
    }

}
