/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Random;

public class App {
    static final String HTTP_GET = "GET";

    public static void main(String[] args) {
        String resourcesPath = getResourcesPath();
        String recentQuotesFileName = "recentquotes.json";
        String forsmaticApiUrl = "http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en";
        File recentQuotesJSONFile = new File(resourcesPath + recentQuotesFileName);
        Quote[] quotesArray = getQuotesArray(recentQuotesJSONFile);
        // If true we're doing a local search with arguments
        if (args.length == 2) {
            String searchType = args[0];
            String searchText = args[1];
            String results = getResultsViaQuery(quotesArray, searchType, searchText);
            System.out.println(results);
        // If True we're doing an internet quote that could fail and end up falling back to a local search
        } else if (args.length == 1 && args[0].equals("internet")) {
            String apiLine = getApiLine(forsmaticApiUrl);
            Quote internetQuote = getInternetQuote(apiLine, quotesArray);
            appendRecentQuotes(quotesArray, recentQuotesJSONFile, internetQuote);
            System.out.println(internetQuote);
        // Else local random quote
        } else {
            int randomIndex = getRandomAvailibleIndex(quotesArray.length);
            System.out.println(getQuote(quotesArray, randomIndex));
        }
    }

    public static void appendRecentQuotes(Quote[] serializedQuotesArray, File appendingFile, Quote quoteToAppend) {
        try (FileWriter fileWriter = new FileWriter(appendingFile)) {
            Quote[] appendedQuotesArray = getAppendedArray(quoteToAppend, serializedQuotesArray);
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            String deserializedAppendedQuotesArray = gson.toJson(appendedQuotesArray);
            fileWriter.write(deserializedAppendedQuotesArray);
        } catch (IOException ioe) {
            System.out.println("Unable to write to file");
            ioe.printStackTrace();
        }
    }

    public static Quote getInternetQuote(String apiLine, Quote[] quotesArray) {
        Quote outputQuote = null;
        try {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            APIQuote apiQuote = gson.fromJson(apiLine, APIQuote.class);
            outputQuote = apiQuote.standardizeQuote();
        } catch (JsonSyntaxException JSE) {
            int randomIndex = getRandomAvailibleIndex(quotesArray.length);
            System.out.println(getQuote(quotesArray, randomIndex));
        }
        return outputQuote;
    }

    public static String getApiLine(String urlString) {
        String output = "";
        try {
            URL apiUrl = new URL(urlString);
            URLConnection apiConnection = apiUrl.openConnection();
            HttpURLConnection apiHTTPConnection = (HttpURLConnection) apiConnection;
            apiHTTPConnection.setRequestMethod(HTTP_GET);
            InputStreamReader streamReader = getInputStreamOrErrorStream(apiHTTPConnection);
            BufferedReader apiBufferedReader = new BufferedReader(streamReader);
            output = apiBufferedReader.readLine();
        } catch (IOException ioe) {
            System.out.println("Unable to create connection");
            ioe.printStackTrace();
        }
        return output;
    }


    public static InputStreamReader getInputStreamOrErrorStream(HttpURLConnection connection) throws IOException {
        int status = connection.getResponseCode();
        if (status > 299) {
            return new InputStreamReader(connection.getErrorStream());
        } else {
            return new InputStreamReader(connection.getInputStream());
        }
    }

    public static Quote[] getAppendedArray(Quote quote, Quote[] quoteArray) {
        Quote[] appendedArray = new Quote[quoteArray.length + 1];
        System.arraycopy(quoteArray, 0, appendedArray, 0, quoteArray.length);
        appendedArray[quoteArray.length] = quote;
        return appendedArray;
    }

    public static String getResultsViaQuery(Quote[] quotesArray ,String searchType, String searchText) {
        if(searchType.equals("author"))
            return getQuoteByAuthor(quotesArray, searchText);
        else if (searchType.equals("contains"))
            return getQuoteByQuoteText(quotesArray, searchText);
        else
            return "Nothing found.";
    }

    public static String getQuoteByAuthor(Quote[] quotesArray, String searchText) {
        ArrayList<Quote> matchingQuotesList = new ArrayList<>();
        for(Quote quote : quotesArray) {
            if(quote.author.equals(searchText))
                matchingQuotesList.add(quote);
        }
        if(matchingQuotesList.size() > 0) {
            Quote[] matchingQuotesArray = new Quote[matchingQuotesList.size()];
            for(int i = 0; i < matchingQuotesList.size(); i++)
                matchingQuotesArray[i] = matchingQuotesList.get(i);
            int randomIndex = getRandomAvailibleIndex(matchingQuotesArray.length);
            return getQuote(matchingQuotesArray, randomIndex);
        } else
            return "Nothing found.";
    }

    public static String getQuoteByQuoteText(Quote[] quotesArray, String searchText) {
        ArrayList<Quote> matchingQuotesList = new ArrayList<>();
        for(Quote quote : quotesArray) {
            if(quote.text.contains(searchText))
                matchingQuotesList.add(quote);
        }
        if (matchingQuotesList.size() > 0) {
            Quote[] matchingQuotesArray = new Quote[matchingQuotesList.size()];
            for(int i = 0; i < matchingQuotesList.size(); i++)
                matchingQuotesArray[i] = matchingQuotesList.get(i);
            int randomIndex = getRandomAvailibleIndex(matchingQuotesArray.length);
            return getQuote(matchingQuotesArray, randomIndex);
        } else
        return "Nothing found.";
    }

    public static String getResourcesPath() {
        String userPath = System.getProperty("user.dir");
        if(userPath.endsWith("app"))
            return userPath + "/src/main/resources/";
        else
            return userPath + "/app/src/main/resources/";
    }

    public static int getRandomAvailibleIndex(int arrayLength) {
        Random rand = new Random();
        return rand.nextInt(0, arrayLength); // upper bound is exclusive
    }

    public static Quote[] getQuotesArray(File quotesJSONFile) {
        Quote[] output = null;
        FileReader reader;
        Gson gson = new Gson();
        try {
            reader = new FileReader(quotesJSONFile);
            output = gson.fromJson(reader, Quote[].class);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return output;
    }

    public static String getQuote(Quote[] quotesArray, int index) {
        return quotesArray[index].text + "\n-- " + quotesArray[index].author;
    }

}
